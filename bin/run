#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'annealing'

Location = Struct.new(:name, :x, :y) do
  def inspect
    "#{name} (#{x},#{y})"
  end

  def distance(location)
    dx = (x - location.x).abs
    dy = (y - location.y).abs
    Math.sqrt((dx**2) + (dy**2))
  end
end

locations = [
  Location.new('Blaire Hills', 60, 200),
  Location.new('Smallville', 180, 200),
  Location.new('Boggs Harbor', 40, 120),
  Location.new('Curtisville', 100, 120),
  Location.new('Allentown', 20, 40)
].shuffle

energy_calculator = lambda do |state|
  state.each_cons(2).sum do |location1, location2|
    location1.distance(location2)
  end
end

state_change = lambda do |state|
  size = state.size
  swapped = state.dup
  idx_a = rand(size)
  idx_b = rand(size)
  swapped[idx_b], swapped[idx_a] = swapped[idx_a], swapped[idx_b]
  swapped
end

Annealing.configuration.logger.level = Logger::DEBUG
simulator = Annealing::Simulator.new(temperature: 10_000, cooling_rate: 0.01)
solution = simulator.run(locations,
                         energy_calculator: energy_calculator,
                         state_change: state_change)

puts "\nInitial itinerary:"
locations.each_cons(2).each_with_index do |(location1, location2), index|
  puts "Stop ##{index + 1}: #{location1.name} -> #{location2.name} (#{location1.distance(location2)})"
end
puts "-------\nEnergy: #{energy_calculator.call(locations)}"

puts "\nAnnealed itinerary:"
solution.state.each_cons(2).each_with_index do |(location1, location2), index|
  puts "Stop ##{index + 1}: #{location1.name} -> #{location2.name} (#{location1.distance(location2)})"
end
puts "-------\nEnergy: #{solution.energy}"
